Description: "{{Arguments.ApplicationID}} version {{Arguments.version}}"

SenzaInfo:
  StackName: "{{Arguments.ApplicationID}}"
  Parameters:
    - DockerImage:
        Description: "Docker image path with version tag of Spark"
    - ApplicationID:
        Description: "The application ID according to Yourturn/Kio"
    - MintBucket:
        Description: "Mint Bucket of Spark application"
    - ScalyrKey:
        Description: "The API key of Scalyr logging service used by Taupage"
        Default: ""
    - ClusterSize:
        Description: "The initial size (number of nodes) for the Spark cluster"
        Default: "1"
    - InstanceType:
        Description: "The instance type for the nodes of cluster"
        Default: "t2.medium"
    - ZookeeperStackName:
        Description: "Which ZooKeeper Stack should be used?"
        Default: ""
    - HiveSite:
        Description: "Which hive-site.xml file should be used?"
        Default: ""
    - ExtJars:
        Description: "Which external jar files (comma-separated) should be used?"
        Default: ""
    - StartMaster:
        Description: "Start spark master daemon"
        Default: ""
    - StartWorker:
        Description: "Start spark worker daemon"
        Default: ""
    - StartThriftServer:
        Description: "Start spark thrift server (HiveServer2) daemon"
        Default: ""
    - DefaultCores:
        Description: "Default number of cores to give to applications in Spark's standalone mode"
        Default: ""
    - ExecutorMemory:
        Description: "Amount of memory to use per executor process (e.g. 2g, 8g)"
        Default: "2g"
    - StartWebApp:
        Description: "Start webapp for spark appliance"
        Default: ""
    - StartNotebook:
        Description: "Start web-based notebook for spark"
        Default: ""
    - MasterStackName:
        Description: "Spark Master stack name, e.g. spark-master"
        Default: ""
    - AuthURL:
        Description: "OAuth2 service URL"
        Default: ""
    - TokenInfoURL:
        Description: "TokenInfo service URL"
        Default: ""
    - Oauth2Scope:
        Description: "OAuth2 scope to access the WebApp"
        Default: "uid"
    - HostedZone:
        Description: "Hosted Zone in which STUPS deploys"
        Default: ""
    - SSLCertificateId:
        Description: "ARN of your SSL Certificate which will be used for ELB"
        Default: ""

SenzaComponents:
  - Configuration:
      Type: Senza::StupsAutoConfiguration
  - AppServer:
      Type: Senza::TaupageAutoScalingGroup
      InstanceType: "{{Arguments.InstanceType}}"
      AutoScaling:
        Minimum: "{{Arguments.ClusterSize}}"
        Maximum: "{{Arguments.ClusterSize}}"
        MetricType: CPU
        ScaleUpThreshold: 70
        ScaleDownThreshold: 40
      HealthCheckType: ELB
      ElasticLoadBalancer: AppLoadBalancer
      LoadBalancerNames:
        - Ref: AppLoadBalancer
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      SecurityGroups:
        - Fn::GetAtt:
          - SparkSecGroup
          - GroupId
      IamRoles:
        - Ref: SparkRole
      TaupageConfig:
        application_id: "{{Arguments.ApplicationID}}"
        runtime: Docker
        source: "{{Arguments.DockerImage}}"
        root: true
        networking: host
        mint_bucket: '{{Arguments.MintBucket}}'
        scalyr_account_key: "{{Arguments.ScalyrKey}}"
        #configure logrotate for application.log
        application_logrotate_size: 10M
        application_logrotate_interval: hourly
        application_logrotate_rotate: 4
        enhanced_cloudwatch_metrics: true
        environment:
          CLUSTER_SIZE: "{{Arguments.ClusterSize}}"
          ZOOKEEPER_STACK_NAME: "{{Arguments.ZookeeperStackName}}"
          HIVE_SITE_XML: "{{Arguments.HiveSite}}"
          START_MASTER: "{{Arguments.StartMaster}}"
          START_WORKER: "{{Arguments.StartWorker}}"
          START_THRIFTSERVER: "{{Arguments.StartThriftServer}}"
          START_WEBAPP: "{{Arguments.StartWebApp}}"
          START_NOTEBOOK: "{{Arguments.StartNotebook}}"
          MASTER_STACK_NAME: "{{Arguments.MasterStackName}}"
          DEFAULT_CORES: "{{Arguments.DefaultCores}}"
          EXECUTOR_MEMORY: "{{Arguments.ExecutorMemory}}"
          EXT_JARS: "{{Arguments.ExtJars}}"
          AUTH_URL: "{{Arguments.AuthURL}}"
          TOKENINFO_URL: "{{Arguments.TokenInfoURL}}"
          OAUTH2_SCOPE: "{{Arguments.Oauth2Scope}}"
Resources:
  SparkRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AmazonS3MintBucketAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: "s3:*"
            Resource: "*"
          - Effect: Deny
            Action: "s3:*"
            Resource: ["arn:aws:s3:::{{Arguments.MintBucket}}"]
          - Effect: Allow
            Action: "s3:GetObject"
            Resource: ["arn:aws:s3:::{{Arguments.MintBucket}}/{{Arguments.ApplicationID}}/*"]
      - PolicyName: AmazonEC2MetadataReadAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: ec2:Describe*
            Resource: "*"
          - Effect: Allow
            Action: elasticloadbalancing:Describe*
            Resource: "*"
      - PolicyName: WriteZMONMetricsIntoCloudWatch
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
  SparkSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Spark Appliance Security Group for {{Arguments.ApplicationID}}-{{Arguments.version}}"
        Tags:
          - Key: "Name"
            Value: "{{Arguments.ApplicationID}}-{{Arguments.version}}-app"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 1024
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
  SparkLBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "LB Spark Appliance Security Group for {{Arguments.ApplicationID}}-{{Arguments.version}}"
      Tags:
        - Key: "Name"
          Value: "{{Arguments.ApplicationID}}-{{Arguments.version}}-lb"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: "{{Arguments.ApplicationID}}-{{Arguments.version}}"
      CrossZone: true
      HealthCheck:
        Target: TCP:7077
        Timeout: 5
        Interval: 30
        UnhealthyThreshold: 2
        HealthyThreshold: 2
      Listeners:
        - InstancePort: 8000
          LoadBalancerPort: 443
          Protocol: HTTPS
          InstanceProtocol: HTTP
          SSLCertificateId: "{{Arguments.SSLCertificateId}}"
      SecurityGroups:
        - "Fn::GetAtt" : [ "SparkLBSecGroup" , "GroupId" ]
      Scheme: internet-facing
      Subnets:
        Fn::FindInMap:
          - LoadBalancerSubnets
          - Ref: AWS::Region
          - Subnets
  Route53VersionedDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "{{Arguments.HostedZone}}"
      Name: "{{Arguments.ApplicationID}}-{{Arguments.version}}.{{Arguments.HostedZone}}"
      Type: CNAME
      TTL: 20
      ResourceRecords:
        - Fn::GetAtt:
           - AppLoadBalancer
           - DNSName
